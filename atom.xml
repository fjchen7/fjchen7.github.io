<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN"><title type="text">fjchen</title><subtitle type="html">fjchen的自留地</subtitle><updated>2022-05-23T14:10:36+00:00</updated><id>https://fjchen.top/</id><link rel="alternate" type="text/html" href="https://fjchen.top/"/><link rel="self" type="application/atom+xml" href="https://fjchen.top/atom.xml"/><author><name>fjchen</name><uri>https://fjchen.top/</uri><email>fjchen7@gmail.com</email></author><rights>在保留本文作者及本文链接的前提下，非商业用途随意转载分享。</rights><generator uri="https://gohugo.io/" version="0.99.1">Hugo</generator><entry><title type="text">当代中国的土地变革史</title><link rel="alternate" type="text/html" href="https://fjchen.top/posts/2022-05-21-land-evolution/"/><id>https://fjchen.top/posts/2022-05-21-land-evolution/</id><updated>2022-05-23T20:45:14+08:00</updated><published>2022-05-21T00:00:00+00:00</published><author><name>fjchen</name><uri>https://fjchen.top</uri><email>fjchen7@gmail.com</email></author><rights>在保留本文作者及本文链接的前提下，非商业用途随意转载分享。</rights><summary type="html">中国土地政策的演变历程。</summary><content type="html">&lt;p>最近看了一些跟改革开放后经济腾飞相关的书，有兰小欢的《置身事内》、黄奇帆的《分析与思考》和《结构性改革》、刘守英的《土地制度与中国发展》、陆铭的《大城大国》、周其仁的《城乡中国》等等。在这里面，印象最深的就是土地，它作为脉络串起了当代中国的政治体系和经济发展模式。&lt;/p>
&lt;p>相比于其他资源，土地最大的特点是不可再生和不可移动。再加上土地是农业生产必不可少的，因此作为农耕大国的中国必然极其重视。从古至今，土地就不断地面临着变革，这些变化大都能归到产权上。本文就来梳理一下中国土地制度的变革历史。&lt;/p>
&lt;h2 id="古代">古代&lt;/h2>
&lt;p>在氏族时代，土地是公有制的，归整个部落所有。&lt;/p>
&lt;p>后来进入文明社会，国家出现，土地演变成了国有制。比如西周的“井田制”，土地归天子所有。&lt;/p>
&lt;p>战国时期，商鞅变法，废井田，开阡陌，承认人民拥有私田，允许自由买卖，出现土地私有值。&lt;/p>
&lt;p>北魏和唐朝初期，推行&lt;strong>均田制&lt;/strong>，政府按人头分配土地给农民，而农民也是按人头向政府缴纳租税。此时本质上是国家土地所有制。&lt;/p>
&lt;p>唐朝中期，唐德宗废除均田制，实施&lt;strong>两税法&lt;/strong>，一年收两次税，农民按拥有的土地数量纳税。这相当于承认了土地私有。&lt;/p>
&lt;p>宋朝时期，税赋制度经“一条鞭法”和“摊丁入亩”改革后，强化了土地私有制。&lt;/p>
&lt;p>整体来看，古代中国的土地所有制是一个“反复横跳的过程：国有制（西周）-&amp;gt;私有制（秦汉）-&amp;gt;国有制（北魏和唐初期）-&amp;gt;私有制（唐宋之后）。&lt;/p>
&lt;h2 id="近代">近代&lt;/h2>
&lt;p>土地私有制一直持续到近代中国。这一制度下，少数人群用经济或暴力手段获取大量土地（即土地兼并），形成大地主阶级，带来社会和阶级矛盾。&lt;/p>
&lt;p>鸦片战争以来，近代中国内忧外患。1906年，孙中山提出“三民主义”，其中民生主义的原则之一是&lt;strong>平均地权&lt;/strong>，即将土地收为国有，并分配给农民。但改革未实行彻底，直到1949年，平均地权的主张仍没能实现。&lt;/p>
&lt;p>土地革命时期（又称第二次国内革命战争，1927-1937年），中国共产党提出“依靠贫雇农、联合中农，限制富农，保护中小工商业者，消灭地主阶级，变封建土地所有制为农民土地所有制”。&lt;/p>
&lt;p>抗日战争期间，中国共产党提出“地主减租减息、农民交租交息”，联合地主和富农进入抗日民族统一战线。&lt;/p>
&lt;p>解放战争期间，中国共产党制定《土地法大纲》，没收地主土地，实行耕者有其田的土地制度。&lt;/p>
&lt;h2 id="土地改革运动">土地改革运动&lt;/h2>
&lt;p>建国初期延续解放战争的土地政策，即没收地主土地，无偿分给农民。&lt;/p>
&lt;p>1950年《土地改革法》的第30条规定&lt;/p>
&lt;blockquote>
&lt;p>土地改革完成后，由人民政府发给土地所有证，并承认一切土地所有者自由经营、买卖及出租其土地的权利。&lt;/p>
&lt;/blockquote>
&lt;p>1953年，大部分地区的土地改革基本完成，农民获得土地的私有权，可以买卖与出租。&lt;/p>
&lt;h2 id="合作社">合作社&lt;/h2>
&lt;p>建国初期到改革开放前夕，中国实施集体经济，也就是一群人一起劳动和分配成果。主要形式有初级合作社、高级合作社和人民公社阶段，等级越来越高。&lt;/p>
&lt;p>等级是根据所有权的公有程度划分的：社员拥有土地，是初级合作社；土地的所有权归集体，则变成高级合作社；如果集体范围更大，公有程度更高，就变成了人民公社。（等级再往上，大概就是所有权归全民，甚至是全世界拥有）&lt;/p>
&lt;p>最开始的是初级合作社。1955年《农业合作社示范章程》规定，农民可以带着土地，加入合作社参与分红。这基于自愿原则，农民可以自由选择加入或退出合作社。土地仍然归农民所有，可以买卖或出租。&lt;/p>
&lt;p>初级合作社的存在时间很短，不久就变成了高级合作社。1956年《高级农业生产合作社示范章程》规定：社员的土地必须转为合作社集体所有，并取消土地报酬。虽然没有强制农民入社，但在执行层面上，农民必须入社。因此事实上，高级合作社完成了大部分农地的公有化。&lt;/p>
&lt;h3 id="人民公社">人民公社&lt;/h3>
&lt;p>社会主义的进程在继续。1958年出现人民公社，集体的范围更大、土地归公的程度更高。合作社是经济组织，只涉及农民的经济生活，但人民公社是“政社合一”，经济政治都要管。最明显的一个特点是，行政范围内的所有人口——包括将来要诞生的人口——天生都是人民公社的社员。&lt;/p>
&lt;p>人民公社化刮起来的“共产风”，降低了农民的积极性，经济出现倒退。&lt;/p>
&lt;p>为了纠正“共产风”的负面影响，1962年中共八届十中全会通过《人民公社60条》，缩小集体的范围，以生产队为单位。集体的范畴变小了，农民的积极性是能够提高的。但该条例第21条规定：&lt;/p>
&lt;blockquote>
&lt;p>生产队范围的土地，都归生产队所有。生产队所有的土地，包括社员的自留地、自留山、宅基地等等，一律不准出租和买卖。&lt;/p>
&lt;/blockquote>
&lt;p>按标准的社会主义改造理论，必须实行公有制的应该限于生产资料，因此之前只有农地公有。但这一条将自留地、自留山、宅基地这类生活资料，也划为了公有。也就是，这个文件缩小了集体的范围，“下调”了公社等级，但又提高了土地的公有化程度。&lt;/p>
&lt;p>其实自1950年《土地改革法》以来，并没有一部正式的法律禁止土地买卖与出租。但在事实上，土地就是被禁止出租与买卖了。&lt;/p>
&lt;h3 id="包产到户">包产到户&lt;/h3>
&lt;p>文革末期，为了提高农民生产积极性，各地试点包产到户（即家庭联产承包责任制）。&lt;/p>
&lt;p>1978年安徽小岗村试点包产到户，1982年在全国普遍合法。这个模式下，农民可以将土地转包给他人。&lt;/p>
&lt;p>不同地方的实施细则不同，最典型的一种是，土地的承包方，一要完成国家和集体的粮食征购（交够国家的，留足集体的），二要向被承包方提供一定数目的口粮。这里不涉及金钱，但如果将口粮视作转包价，这实际上就是有偿出让土地行为。&lt;/p>
&lt;p>包产到户的问题在于，农民只有土地的使用权。承包，只是在转让土地的使用权。但由于是集体土地，使用权没有明显边界。如果家里人口发生变化，那需要重新分配土地，此时之前承包出去的土地需要做相应的增减吗？这是一个界限模糊的问题。&lt;/p>
&lt;p>1987年，贵州湘潭县首创“赠人不增地，减人不减地”，也就是承包期间，增减人口不再调整土地。这个创新解决了上述问题，在现实意义上确定了使用权（产权）的界限。&lt;/p>
&lt;h2 id="八二宪法">八二宪法&lt;/h2>
&lt;p>1982年修订宪法，其中第10条规定&lt;/p>
&lt;blockquote>
&lt;p>城市的土地属于国家所有。&lt;/p>
&lt;p>农村和城市郊区的土地，除由法律规定属于国家所有的以外，属于集体所有；宅基地和自留地、自留山，也属于集体所有。&lt;/p>
&lt;p>国家为了公共利益的需要，可以依照法律规定对土地实行征收或者征用并给予补偿。&lt;/p>
&lt;/blockquote>
&lt;p>八二宪法第一次在法律上明确了两种所有制并存的土地制度，即国家所有和集体所有。&lt;/p>
&lt;p>城市土地是国有的，农村土地是集体的，土地可以征收或征用，这几条为未来的征地模式开了口子。&lt;/p>
&lt;h2 id="国有土地转让权">国有土地转让权&lt;/h2>
&lt;p>1988年修订宪法，通过对第10条的修正案，增加了内容&lt;/p>
&lt;blockquote>
&lt;p>任何组织或者个人不得侵占、买卖或者以其他形式非法转让土地。土地的使用权可以依照法律的规定转让。&lt;/p>
&lt;/blockquote>
&lt;p>这是首次确定土地的使用权可以转让。&lt;/p>
&lt;p>但今后出来的相关条例和实践，依法转让的只限于国有土地，不包括集体土地。比如1988年修订的《土地管理法》，只准许国有土地使用权可转让。&lt;/p>
&lt;p>国有土地可以转让，集体土地不能转让，这贯穿着整个中国高速增长时期。&lt;/p>
&lt;h3 id="土地批租">土地批租&lt;/h3>
&lt;p>在国家工业化之后，政府主导的城市化模式正式登场，工业对土地的需求迅速增加。&lt;/p>
&lt;p>中国学习香港的&lt;strong>土地批租&lt;/strong>制度来满足这个需求。所谓土地批租，就是将公家土地的使用权租让给民间。1988年修订的宪法也支持这一做法。&lt;/p>
&lt;p>土地批租解决了两个问题：一是租给民间，解决工业用地问题；二是出租是有偿的，租金被称为“土地出让金”。在分税制改革后，地方政府的财政收入大大下降，而土地出让金逐渐成为主要来源，演变成了&lt;strong>土地财政&lt;/strong>。&lt;/p>
&lt;p>土地批租是相对市场化的，因为地方政府有很多，叫价竞标的企业也有很多，大家会相互竞争。&lt;/p>
&lt;h2 id="征地">征地&lt;/h2>
&lt;p>除了工业化需要土地，高速的城市化也需要居住、建筑用地。城市的土地总归会不够用，需要从其他地方想办法。&lt;/p>
&lt;p>八二宪法规定，为了公共利益的需要，国家可以对土地实行征收或者征用。于是，政府的对策是通过征地，先将集体土地转为国有土地，然后就能进行建设或批租出去。&lt;/p>
&lt;p>集体土地主要有农地和宅基地。宅基地是农民的住所，征用后需要安置，否则就会出现流民。一开始资源没有那么多，于是农地成为主要征用的土地类型。&lt;/p>
&lt;p>征地是“强制”的，农民没有选择权，只能被迫接受。补偿金也是政府定的，农民几乎没有议价权。&lt;/p>
&lt;p>1998年第二次修订《土地管理法》，更是对土地的用途做了管制——&lt;em>将土地分为农用地、建设用地和未利用地。严格限制农用地转为建设用地，控制建设用地总量，对耕地实行特殊保护&lt;/em>。也就是说，如果农民不种地，那就只能把农地承包给别人种，不能用于其他用途。要不然，就只能闲置土地，等政府来征地。&lt;/p>
&lt;p>征地的补偿价也不高。《土地管理法》规定，征地补偿不得超过土地原用途前三年平均年产生的30倍。按每亩收益2000元计算，征地补偿就6万元。再加上其他补偿（比如安置补偿），充其量不超过10万元。这个价格远低于土地批租价格。&lt;/p>
&lt;p>农地被征用，农民原本的农业生产就无法继续。于是，大量农民涌入城市，成为了城市建设的劳动力。农民几乎是没有选择，被一步步地推往城市务工。&lt;/p>
&lt;p>另一方面，1998年修订的《土地管理法》还设置了耕地红线。地方政府不能无限制征用农地，耕地面积需要满足一定的指标。地方政府费尽心思，推出“城乡建设用地增减挂钩”、“土地交易所”、“地票模式”等模式。这些本质上都是通过竞标或交易，让一部分农村的建筑用地或宅基地复耕为农地，做好安置后，再征用另一块更合适的农地，一增一减满足耕地红线。这个规定一定程度市场化了农村土地市场，抬高了征地赔偿。&lt;/p>
&lt;h2 id="感想">感想&lt;/h2>
&lt;p>梳理完这段历史，产生了很多感想。&lt;/p>
&lt;p>第一个感想是，&lt;strong>产权有巨大的激励作用&lt;/strong>。&lt;/p>
&lt;p>所谓产权，就是指财产的所有权。这是一个比较大的范畴，可以切割成多种权利，主要包括对财产的占用、使用、收益、处分等。中国土地的改革，就是在这些细分权利上做文章。&lt;/p>
&lt;p>在合作社和人民公社期间，农民只拥有使用权；农民无法占用农地的经济收益，因为粮食要上交国家；地也不能随便给其他人耕种。&lt;/p>
&lt;p>包产到户实行后，一是交足国家和集体，剩下都归自己，这是让渡了收益权；二是地可以承包给他人，这是让渡了转让权（也就是买卖）。&lt;/p>
&lt;p>包产到户一开始没有解决产权的边界问题——人口发生变化会带来土地变化，这是模糊地带，不同说法会带来不同的土地增减。如果难以预期，就会造成实施困难，积极性也会被缩减。而解决的创新方案是“赠人不增地，减人不减地”，明晰了产权边界。&lt;/p>
&lt;p>诺贝尔经济学奖的获奖者科斯说过，“清楚的产权界定是市场交易的前提”。而市场交易的作用是让资源得到最充分的利用。包产到户激发了生产积极性，就是这一原理的体现。&lt;/p>
&lt;p>第二个感想是，&lt;strong>国家经济发展都是建立在农民的牺牲上&lt;/strong>。&lt;/p>
&lt;p>首先是公社化运动。解放战争和建国初期，都是沿袭“打土豪，分田地”的思路，农民能拥有土地。社会主义初期，经济先天不足，但又要追随学习老大哥，优先发展重工业。于是就只能剥夺农民土地，把土地集中到国家控制的合作社和人民公社，利用剪刀差为工业化累积资本。&lt;/p>
&lt;p>其次是征地。城市和农村是相互隔离的土地市场。城市土地的买卖双方都有多个，相对市场化；但农村土地的买方只有地方政府，且征地还是强制的，是垄断的买方市场。这样，政府就能低价征地，再高价批租，差价成为财政来源（土地财政）。农村与城市的土地不能相互流通，农村地价远低于城市，这实质上是将农民剥离出了工业化和经济发展的收益范围。在失去农地后，农民大都只能来城市务工。年轻时可以为城市化做贡献，但由于户籍等问题，年老后又只能回农村。这些牺牲，都用来弥补政府财政和支持城市发展了。&lt;/p>
&lt;p>康德说过，人，是目的本身，在任何时候都不能当作工具。此刻才理解这句话的含义，不禁长嘘一声。&lt;/p></content><category scheme="https://fjchen.top/posts/" term="posts" label="posts"/><category scheme="https://fjchen.top/tags/%E7%BB%8F%E6%B5%8E/" term="经济" label="经济"/></entry><entry><title type="text">贝叶斯思维看世界</title><link rel="alternate" type="text/html" href="https://fjchen.top/posts/2022-03-27-bayes-mind.md/"/><id>https://fjchen.top/posts/2022-03-27-bayes-mind.md/</id><updated>2022-05-23T20:45:14+08:00</updated><published>2022-03-27T00:00:00+00:00</published><author><name>fjchen</name><uri>https://fjchen.top</uri><email>fjchen7@gmail.com</email></author><rights>在保留本文作者及本文链接的前提下，非商业用途随意转载分享。</rights><summary type="html">贝叶斯思维是人脑认识世界的默认方式。</summary><content type="html">&lt;p>在逻辑学中，「归纳法」和「演绎法」是人类认识世界的两种基本方式。「归纳法」是通过观察若干事例来得出一般性结论，是从&lt;strong>部分推断整体&lt;/strong>的过程。比如，如果我观察到一枚硬币掷了10次都出现反面，那我会认为它的质量有问题，猜它下一次还是反面；而「演绎法」相反，需要进行严格的逻辑推理，才能得出结论。还是以硬币为例，我需要测量硬币质量和重心，通过一系列数学公式，得出这枚硬币投掷后必然会是反面的结论。「归纳法」和「演绎法」的不同，是使用&lt;strong>经验&lt;/strong>或&lt;strong>逻辑&lt;/strong>认识世界的差异。&lt;/p>
&lt;p>贝叶斯思维是以&lt;strong>经验&lt;/strong>结合&lt;strong>概率&lt;/strong>的方式来认识世界的过程，属于「归纳法」的一种。事实上，除非是考试或研究，生活中大部分人都以经验来认识世界。贝叶斯思维很符合人类认识世界的模式。在各种决策和推断里，人脑实际上在无意识地做着贝叶斯计算。&lt;/p>
&lt;p>用贝叶斯思维认识事物的过程大致是这样：&lt;/p>
&lt;ol>
&lt;li>每个人都有自己的经验。这个经验是你从出生到现在所接收的所有资讯的总结，包括了书本上学到的知识、亲眼经历、社交媒体浏览的内容、朋友间的聊天等等。&lt;/li>
&lt;li>现在发生了一件事，要探究造成它的原因是什么。假设只有$B_1$ $B_2$ $B_3$三种可能的原因。&lt;/li>
&lt;li>我们的脑瓜子会潜意识地做贝叶斯计算，对$B_1$ $B_2$ $B_3$都做一个概率计算。假设会有10%是$B_1$，50%是$B_2$，40%会是$B_3$。很自然地，我们会选择概率最高的$B_2$作为我们的判断。&lt;/li>
&lt;li>并且，发生的这件事会成为新的信息，更新到我们的经验中。我们会用这份新的经验来继续认识世界，周而复始。&lt;/li>
&lt;/ol>
&lt;p>贝叶斯思维是一种不断「进化」的过程：经验可能是错误的，但通过不断地更新经验，你会逐渐接近真实，基于此所做的判断会越来越准确。&lt;/p>
&lt;h2 id="贝叶斯公式">贝叶斯公式&lt;/h2>
&lt;p>贝叶斯思维基于贝叶斯公式，最初应用在概率论上。公式如下：&lt;/p>
&lt;p>$$
P(B_i|A)=\frac{P(A|B_i)P(B_i)}{\sum\limits_jP(B_j)P(A|B_j)}
$$&lt;/p>
&lt;p>$B_i$是事件可能的走向，$A$是发生的事件。$P(B_i|A)$是条件概率，表示在$A$发生后，$B_i$发生的概率。而$P(B_i)$表示经验，称为&lt;strong>先验概率&lt;/strong>。&lt;/p>
&lt;p>在认识世界的贝叶斯思维里，这个公式体现为：最初我们只有经验$P(B_i)$，现在观察到事件$A$发生后，想要知道事件发生的原因。$P(B_i|A)$是不同原因可能的概率，我们要做的，是计算并从中找出概率最大的一个，作为我们的判断。&lt;/p>
&lt;p>在贝叶斯公式里，「进化」的特点体现为$P(B_i)$的更新。这一次计算用的$P(B_i)$，实际上是上次计算的结果$P(B_i|A)$。而这一次得到的$P(B_i|A)$，也会成为下次计算的$P(B_i)$。经验的更新，在这里是一层套一层的迭代过程。&lt;/p>
&lt;h2 id="例子">例子&lt;/h2>
&lt;p>在《狼来了》的故事里，村民第一次听到牧童喊狼来了，就急冲冲地拿着锄头和镰刀往山上跑。但频繁上当几次后，在狼真的来了后，牧童大喊大叫，却没人回应，发生悲剧。为什么最后村民不相信牧童？我们可以说，是因为牧童说谎成瘾，所以村民不相信他。但说谎和不相信之间实际上还藏着一层关系：因为说谎成瘾，所以这一次也很有可能是谎言，因此村民不相信他。&lt;/p>
&lt;p>这是很典型的贝叶斯思维：「&lt;strong>说谎成瘾&lt;/strong>」是一种对过往经验的总结，而「&lt;strong>很有可能是谎言&lt;/strong>」是在概率上做了判断，而最后村民选择了概率最大的情况作为行动的依据。&lt;/p>
&lt;p>但这个过程是递进式的。假设牧童在喊第3次时，村民才不赶过来。那为什么前两次都赶来了，就第3次不来。这是一个信心递减的过程。直观来理解：&lt;/p>
&lt;ul>
&lt;li>第1次：村民不了解牧童，但认为孩子不会说谎，所以选择相信。转换成数字，村民认为真话的概率是100%。&lt;/li>
&lt;li>第2次：村民对牧童有了不好印象，但还不至于太坏，所以仍然相信这是真话。这里不妨设真话的概率为60%。&lt;/li>
&lt;li>第3次：有了前两次的前车之鉴，村民认为真话的概率低于谎话，概率变成30%。牧童更有可能说谎，所以村民不相信牧童。&lt;/li>
&lt;/ul>
&lt;p>每一次牧童大喊，村民都会根据事实，重新计算自己心中的概率值。而每次的计算，都是基于前面的所有经历。对感官接收到的信息，大脑能无意识地使用贝叶斯计算，这无时不刻在生活中发生着。某种程度上看，贝叶斯思维是人类演化而来的能力，是自然选择的结果。&lt;/p>
&lt;h2 id="贝叶斯哲学">贝叶斯哲学&lt;/h2>
&lt;p>统计学在长期以来都分为两个派别——频率派和贝叶斯派，双方对概率有着不同的定义。频率派认为，频率是事件在长时间内发生的频率（也称为古典频率），这是事件的固有属性；而贝叶斯派认为，频率是人类对事件发生的信心，是一个主观值。&lt;/p>
&lt;p>对概率定义的不同导致了两派哲学思想上的差异。频率派的频率，是客观的「真理」，他们试图中从随机性中得到确定性；而贝叶斯派的频率是「信心」，是主观的，每个人对同一件事的信心可以不同，也不存在唯一的信心值。频率派计算频率，是追求真理的过程。这个过程必定是曲折的，很难达到的。而贝叶斯派追求实用性，他们不关心结论是否为真理或客观事实，他们只关心是否能自圆其说，适用当下的场景。&lt;/p>
&lt;p>这种追求真理和追求实用的不同，可以体现在生活里的方方面面。比如，在编程时要使用一个没用过的第三方库，有两种路线&lt;/p>
&lt;ul>
&lt;li>从头到尾看一遍官方文档，完整了解原理后，再实现需求。这是频率派的哲学，追求真理。&lt;/li>
&lt;li>自己摸索或上stackoverflow搜索，直接满足需求。这个过程中可能需要多次折返修改等。这是贝叶斯派的哲学，追求实用。&lt;/li>
&lt;/ul>
&lt;p>我想大部分程序员会先选择贝叶斯哲学，先看例子满足需求，而不是先阅读文档。只有在需要做优化或者找不到足够好的例子时，再来研读文档。在节约时间和精力上，这确实是更好的策略。&lt;/p>
&lt;p>上面这个例子中，有文档可以阅读，因此「真理」可以追求到。但在现实中的很多场景里，「真理」往往很难甚至是追寻不到。比如，想知道自己的爱好，是很难通过了解自己的个性和能力知道的（认识自己是很难的一件事）。取而代之，我们可以多尝试不同的事情，每次尝试都会加深地你对自身喜好的认识。&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>在贝叶斯主义者眼中，真理是不存在的。任何知识都不是真理，它们的区别无非在于适用性。因此，贝叶斯主义的“至圣先师”乔治·博克斯说过：“所有模型都是错的，有些模型很有用。”这在侧面反映了人类认识世界的局限性——我们或许根本就无法接近真理，只能得到能足够描述当下的知识。但谁又能保证我们所见的世界是真实。&lt;/p>
&lt;p>但乐观一点看，随着时间维度的增加，我们收集的信息越多，将会越来越接近真实。这或许是唯一令我们宽慰的地方了。&lt;/p>
&lt;p>&lt;strong>我们只能得到部分真相，但可以通过不断收集证据来完善我们的观点，逐渐逼近真相&lt;/strong>。&lt;/p></content><category scheme="https://fjchen.top/posts/" term="posts" label="posts"/><category scheme="https://fjchen.top/tags/%E6%80%9D%E7%BB%B4/" term="思维" label="思维"/><category scheme="https://fjchen.top/tags/%E5%93%B2%E5%AD%A6/" term="哲学" label="哲学"/></entry><entry><title type="text">本博客的搭建流程</title><link rel="alternate" type="text/html" href="https://fjchen.top/posts/2022-01-22-blog-setup-process/"/><id>https://fjchen.top/posts/2022-01-22-blog-setup-process/</id><updated>2022-05-23T20:45:14+08:00</updated><published>2022-01-22T00:00:00+00:00</published><author><name>fjchen</name><uri>https://fjchen.top</uri><email>fjchen7@gmail.com</email></author><rights>在保留本文作者及本文链接的前提下，非商业用途随意转载分享。</rights><summary type="html">第一次用 GitHub Pages + Hugo 搭建博客，在主题和外观配置上花了最长时间。本文对整个搭建流程进行了整理。</summary><content type="html">&lt;p>&lt;a href="https://pages.github.com/">GitHub Pages&lt;/a> 是 Github 提供的一项服务，让你能不需要主机和域名，通过仓库就能建立个人网站。&lt;/p>
&lt;p>用 GitHub Pages 搭建的大都是静态网站。静态网站是指提前编译好文件，访问时直接返回它们的网站。与之相对的是动态网站，每次访问时服务器需要重新生成文件。由于内容变化不频繁，个人博客基本都是静态网站。&lt;/p>
&lt;p>通过编写 HTML/CSS/JavaScript，理论上能在静态网站上实现各种功能，比如样式、评论、标签等。但这费时费力，对于没有前端经验的人来说也不现实。而&lt;strong>静态网站生成器&lt;/strong>能解决这个痛点——依靠它，你能用很简单的方式来定制化，最后生成前端文件即可，大大减少了工作量。&lt;/p>
&lt;p>GitHub Pages 常搭配的静态网站生成器有 Jekyll、Hexo 和 Hugo。&lt;/p>
&lt;ul>
&lt;li>Jekyll 基于 Ruby，GitHub Pages 原生支持，最老牌；&lt;/li>
&lt;li>Hexo 基于 Node.js，定制能力强，主题丰富；&lt;/li>
&lt;li>Hugo 基于 Go，依赖简单，生成速度快。&lt;/li>
&lt;/ul>
&lt;p>我并不需求花哨的外观或功能，追求简单快速，因此选择 Hugo。GitHub Pages 托管网站，Hugo 提供样式和功能，两者结合能打造出酷炫好看的个人博客。&lt;/p>
&lt;h2 id="建站流程">建站流程&lt;/h2>
&lt;p>本章介绍用 GitHub Pages + Hugo 来搭建本博客的流程。&lt;/p>
&lt;h3 id="1-设置-github-pages">1. 设置 GitHub Pages&lt;/h3>
&lt;p>用 GitHub Pages 搭建个人网站的流程非常简单：&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://github.com/new">新建&lt;/a>一个名字为&lt;code>&amp;lt;username&amp;gt;.github.io&lt;/code>的仓库，&lt;code>&amp;lt;username&amp;gt;&lt;/code>必须是你的 Github 账户名。&lt;/li>
&lt;li>在仓库根目录下新建文件 &lt;code>index.html&lt;/code>并提交修改。这个文件里可以是任意内容。&lt;/li>
&lt;li>在浏览器里访问 &lt;code>&amp;lt;username&amp;gt;.github.io&lt;/code>，就能看到搭好的 GitHub Page。&lt;/li>
&lt;/ol>
&lt;p>访问 &lt;code>https://&amp;lt;username&amp;gt;.github.io&lt;/code> 时，Github 会加载 main 分支下 &lt;code>index.html&lt;/code>；如果这个文件不存在，就加载 &lt;code>README.md&lt;/code>；否则，将显示 404。&lt;/p>
&lt;h3 id="2-hugo-初始化博客">2. Hugo 初始化博客&lt;/h3>
&lt;p>以 &lt;code>index.html&lt;/code> 为入口，你可以搭配 CSS 或加上超链接，这样玩法就很多了。但手动编辑太麻烦，于是我们需要 Hugo 来「让它看起来像一个博客」。&lt;/p>
&lt;p>首先照着&lt;a href="https://gohugo.io/getting-started/installing/">文档&lt;/a>在电脑上安装 Hugo，然后遵循以下步骤：&lt;/p>
&lt;ol>
&lt;li>克隆博客仓库到本地&lt;/li>
&lt;li>照着&lt;a href="https://gohugo.io/getting-started/quick-start/">官方的 Quick Start 文档&lt;/a>初始化仓库。这里不再赘述，但有几点要注意：
&lt;ul>
&lt;li>命令 &lt;code>hugo server -D&lt;/code> 让你能预览效果。&lt;/li>
&lt;li>必须先在 &lt;code>config.tml&lt;/code> 里配置好主题，否则网站无法正常显示。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>在 &lt;code>config.toml&lt;/code> 里加上配置 &lt;code>publishDir = 'docs'&lt;/code>，然后用命令 &lt;code>hugo&lt;/code> 生成静态文件。现在 &lt;code>docs/&lt;/code> 被设置成生成目录了，所生成的静态文件会被放在这里。&lt;/li>
&lt;li>提交修改并 &lt;code>git push&lt;/code>。&lt;/li>
&lt;li>修改仓库的设置：Settings -&amp;gt; Pages -&amp;gt; Source
&lt;img src="https://fjchen.top/images/2022-01-22-github-settings-pages-main.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>现在，在浏览器访问&lt;code>https://&amp;lt;username&amp;gt;.github.io&lt;/code>，就能看到 Hugo 带来的变化。&lt;/p>
&lt;p>默认设置下，Hugo 生成的静态文件放在 &lt;code>public/&lt;/code> 目录里，而 GitHub Pages 读取 main 分支的 &lt;code>index.html&lt;/code>。这样 GitHub Pages 没法找到 Hugo 生成的文件，页面会是空白的。步骤 3 和 5 就是为了解决这个问题：步骤 3 让 Hugo 将静态文件生成在 &lt;code>docs/&lt;/code>下，步骤 5 让 GitHub Pages 读取 &lt;code>docs/index.html&lt;/code>，使之能读到正确文件。&lt;/p>
&lt;p>&lt;code>config.toml&lt;/code> 是 Hugo 的配置文件。后面要介绍的&lt;a href="https://fjchen.top/posts/2022-01-22-blog-setup-process/#%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE">主题配置&lt;/a>大部分都会在这个文件里。&lt;/p>
&lt;h3 id="3-绑定域名">3. 绑定域名&lt;/h3>
&lt;p>到目前为止，一个完整博客的形态已经完成。但如果你不满足于此，想用自己的域名，那遵循以下步骤：&lt;/p>
&lt;ol>
&lt;li>购买域名，假设是 &lt;code>example.com&lt;/code>。&lt;/li>
&lt;li>在域名注册商处配置 DNS 解析：类型是 CNAME，指向 &lt;code>&amp;lt;username&amp;gt;.github.io&lt;/code>。&lt;/li>
&lt;li>在仓库的 &lt;code>static/&lt;/code>（不存在就创建一个）下新建文件 &lt;code>CNAME&lt;/code>，内容只有一行，为&lt;code>example.com&lt;/code>。生成时，Hugo 会 复制&lt;code>static/&lt;/code> 里的文件到生成目录下。&lt;/li>
&lt;li>执行 &lt;code>hugo&lt;/code> 重新生成静态文件，然后提交更改并 &lt;code>git push&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>等一小会让 DNS 解析生效。然后，通过 &lt;code>example.com&lt;/code> 就能访问博客，而且还是 HTTPS 的。&lt;/p>
&lt;p>步骤 2 设置 CNAME，是为了让 &lt;code>example.com&lt;/code> 指向 &lt;code>&amp;lt;username&amp;gt;.github.io&lt;/code>，使得前者所指向的 IP 与后者相同。此时，访问 &lt;code>example.com&lt;/code> 就与访问 &lt;code>&amp;lt;username&amp;gt;.github.io&lt;/code> 无异。DNS解析中，ANAME 和 CNAME 分别是不同的记录类型。ANAME 为域名指向 IP，DNS 服务器会把该域名解析成 IP；而 CNAME 为域名指向域名，DNS 服务器会先把该域名解析成所指向域名，再继续往下解析，直到获得 IP。这里使用 CNAME，就能避免 &lt;code>&amp;lt;username&amp;gt;.github.io&lt;/code> 的 IP 改变时，需要重新设置 DNS 解析。&lt;/p>
&lt;p>步骤 3 和 4 设置在每次执行 &lt;code>hugo&lt;/code> 时，在生成目录 &lt;code>docs/&lt;/code> 下生成 &lt;code>CNAME&lt;/code> 文件，Github 会读取这个文件让 CNAME 生效。&lt;/p>
&lt;h2 id="发布文章">发布文章&lt;/h2>
&lt;h3 id="新建文章">新建文章&lt;/h3>
&lt;p>文章以 Markdown 形式存放在 &lt;code>content/posts/&lt;/code> 下。如果想发布新文章，在 &lt;code>content/posts/&lt;/code> 下新建 Markdown 文件，然后撰写内容即可。但更推荐的做法是用命令 &lt;code>hugo new posts/&amp;lt;article_name&amp;gt;.md&lt;/code>，这个命令会以 &lt;code>archetypes/default.md&lt;/code> 为模版，在 &lt;code>content/posts/&lt;/code> 下生成 Markdown 文件。&lt;/p>
&lt;p>写完文章后，要用执行 &lt;code>hugo&lt;/code> 重新生成静态文件，然后上传到 GitHub。这样就完成了一次文章发布。&lt;/p>
&lt;h3 id="元数据">元数据&lt;/h3>
&lt;p>可以在 Markdown 文章的开头添加 YAML 格式的元数据，供 Hugo 读取。比如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">title: &amp;#34;我的第一篇文章&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">date: 2020-03-04T15:58:26+08:00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">draft: false
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tag: [&amp;#34;foo&amp;#34;, &amp;#34;bar&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">author: &amp;#34;xyz&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">summay: &amp;#34;This is summary&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a href="https://hugoloveit.com/zh-cn/theme-documentation-content/#front-matter">这里&lt;/a>有详细的元数据列表。&lt;/p>
&lt;h3 id="模版">模版&lt;/h3>
&lt;p>&lt;code>archetypes/default.md&lt;/code> 文件是文章的模版。Hugo提供了一套&lt;a href="https://gohugo.io/templates/">模版语法&lt;/a>和&lt;a href="https://gohugo.io/functions">内置方法&lt;/a>，能执行逻辑，动态地生成内容。文章模版里最常用的就是设置新文章的元数据，比如我的模版：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">title: &amp;#34;{{ substr (replace .Name &amp;#34;-&amp;#34; &amp;#34; &amp;#34;) 11 | title }}&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">date: {{ substr .Name 0 10 }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tags: [&amp;#34;foo&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">summary: &amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用上面的模版，执行 &lt;code>hugo new posts/2022-01-20-my-first-post.md&lt;/code> 所生成文件 &lt;code>2022-01-20-my-first-post.md&lt;/code> 里的内容为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">title: &amp;#34;My First Post&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">date: 2022-01-20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tags: [&amp;#34;bar&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">summary: &amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>模版中的 &lt;code>.Name&lt;/code> 是变量，表示文件名。另一个常用变量是 &lt;code>.Data&lt;/code>，表示当前日期。&lt;code>replace&lt;/code> 和 &lt;code>substr&lt;/code> 都是 Hugo 提供的方法。&lt;code>title&lt;/code> 字段里，先用 &lt;code>replace&lt;/code> 将 &lt;code>-&lt;/code> 替换成空格，再用 &lt;code>substr&lt;/code> 截取第 11 位到结尾的字符。&lt;code>date&lt;/code> 字段里，直接用 &lt;code>substr&lt;/code> 截取文件名的前 10 个字符。&lt;/p>
&lt;p>不仅仅是生成文章，Hugo 模版还能生成各种 Html 和其他文件，功能强大。要精通 Hugo 就得熟知模版的开发。&lt;/p>
&lt;h3 id="自动化发布">自动化发布&lt;/h3>
&lt;p>发布文章的流程里有一个很麻烦的地方：每次都要用执行 &lt;code>hugo&lt;/code> 重新生成一次静态文件，然后推到远程仓库。这一步很容易忘记，而且生成的文件比较大，推送也比较慢。&lt;/p>
&lt;p>我们可以依靠 GitHub Actions，将这一步自动化，这里的逻辑为：&lt;/p>
&lt;ol>
&lt;li>在 main 分支修改内容，并推送到仓库。&lt;/li>
&lt;li>GitHub Actions 发现新提交，就用 &lt;code>Hugo&lt;/code> 编译，把生成的文件提交到另一个分支 gh-pages 上。&lt;/li>
&lt;li>GitHub Pages 监控 gh-pages 分支的内容，发现新提交就重建网页。&lt;/li>
&lt;/ol>
&lt;p>具体的设置步骤如下：&lt;/p>
&lt;ol>
&lt;li>新建分支 gh-pages 并推送到远程仓库&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">git checkout --orphan gh-pages
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git reset --hard
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit --allow-empty -m &lt;span class="s2">&amp;#34;Initializing gh-pages branch&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push origin gh-pages
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git checkout main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>编写 GitHub Actions 脚本并提交，具体内容可以见&lt;a href="https://github.com/fjchen7/fjchen7.github.io/commit/1ce6f830c50c1e86e672ffec18acd72a98390bf6">这个 commit&lt;/a>。&lt;/li>
&lt;li>配置让 GitHub Pages 读取 gh-pages 分支的根目录：修改仓库的 Settings -&amp;gt; Pages -&amp;gt; Source
&lt;img src="https://fjchen.top/images/2022-01-22-github-settings-pages-gh-pages.png" alt="">&lt;/li>
&lt;/ol>
&lt;p>现在，一旦推送修改到 main 分支，GitHub Actions 会生成静态文件并提交到 gh-pages 分支。这样就省去了一步，而且源文件和编译后的文件分开了，内容更好维护。&lt;/p>
&lt;h2 id="主题配置">主题配置&lt;/h2>
&lt;p>博客的基本功能都搭建好了，剩下的就是主题配置。这是个苦力活，因为很难一下子找到自己喜欢的主题，而且需要慢慢实验配置项来看是否满意。&lt;/p>
&lt;h3 id="loveit">LoveIt&lt;/h3>
&lt;p>找来找去，我最后选择了 &lt;a href="https://github.com/dillonzq/LoveIt">LoveIt&lt;/a>。除了它，类似主题还有 &lt;a href="https://github.com/liuzc/LeaveIt">LeaveIt&lt;/a>（最早）、&lt;a href="https://github.com/Fastbyte01/KeepIt">KeepIt&lt;/a>、&lt;a href="https://github.com/sunt-programator/CodeIT">CodeIt&lt;/a>、&lt;a href="https://github.com/HEIGE-PCloud/DoIt">DoIt&lt;/a> 等。这类 XXIt 主题有这么多，都是因为前人不再维护，其他人 Fork 新开了新项目。&lt;/p>
&lt;p>我的 LoveIt 配置可以见&lt;a href="https://github.com/fjchen7/fjchen7.github.io/blob/main/config.toml">这里&lt;/a>，都是比较细节的改动：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/fjchen7/fjchen7.github.io">基本配置&lt;/a>：包括标题、个人说明、导航栏、评论等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自定义代码字体：在 &lt;code>themes/LoveIt/assets/css/_overrides.scss&lt;/code> 里添加&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-scss" data-lang="scss">&lt;span class="line">&lt;span class="cl">&lt;span class="k">@import&lt;/span> &lt;span class="sx">url(&amp;#39;https://fonts.googleapis.com/css?family=Fira+Mono:400,700&amp;amp;display=swap&amp;amp;subset=latin-ext&amp;#39;)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$code-font-family&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">Fira&lt;/span> &lt;span class="n">Code&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Source&lt;/span> &lt;span class="n">Code&lt;/span> &lt;span class="n">Pro&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Monaco&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Menlo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Fira&lt;/span> &lt;span class="n">Mono&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Consolas&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="ni">monospace&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>_overrides.scss&lt;/code> 的内容能覆盖默认的 CSS。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>修改GitHub的图标：在 &lt;code>themes/LoveIt/assets/data/social.yml&lt;/code> 里将 &lt;code>fa-github-alt&lt;/code> 改为 &lt;code>fa-github&lt;/code>。这里用的都是 fontawesome 提供的图标。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>我这做了简单的配置。如果要做深入定制化，可以参考参考别人的经验：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.cnblogs.com/langyao/p/14285886.html">使用Hugo框架搭建博客的过程 - 主题配置&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://lewky.cn/posts/hugo-3.html">Hugo系列(3.0) - LoveIt主题美化与博客功能增强&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="其他主题">其他主题&lt;/h3>
&lt;p>除了 LoveIt，这里还有一些不错但我没有选择的主题：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/adityatelange/hugo-PaperMod">hugo-PaperMod&lt;/a>：布局和 LoveIt 很像，但导航栏位于文章首页，所以没用上。&lt;/li>
&lt;li>&lt;a href="https://github.com/luizdepra/hugo-coder">Hugo-coder&lt;/a>：风格深得我心，但没有标签和导航栏，也不是为国人定制的。&lt;/li>
&lt;li>&lt;a href="https://github.com/olOwOlo/hugo-theme-even">hugo-theme-even&lt;/a>：好看，该有的功能都有，但比较烂大街。&lt;/li>
&lt;li>&lt;a href="https://github.com/CaiJimmy/hugo-theme-stack">hugo-theme-stack&lt;/a>：布局丰富，是另一种风格。&lt;a href="https://mantyke.icu/categories/%E9%BA%BB%E7%93%9C%E5%BF%AB%E9%80%9F%E5%BF%B5%E5%92%92%E4%BA%92%E5%8A%A9%E5%B0%8F%E7%BB%84/">这里&lt;/a>有一些该主题的配置文章。&lt;/li>
&lt;/ul>
&lt;p>如果你还还获取更多主题，可以在这些地方逛逛：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://themes.gohugo.io/">Hugo Themes&lt;/a>：官方主题库。&lt;/li>
&lt;li>&lt;a href="https://hugothemesfree.com/">Hugo Themes Free&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="小结">小结&lt;/h2>
&lt;p>本文介绍 Github Pages + Hugo 搭建个人博客的流程，并梳理了文章发布的过程和主题配置的大致形式。Github Pages 是一个很良心的服务，为个人博主省去了很多麻烦。而对于 Hugo，我本着「内容为上」的原则，只简单使用了开源主题，没有进行深度定制。不考虑外观，初学者用这两个工具在1～2小时里就能搭起网站。但如果考虑更为细节的样式和功能，那就需要投入很大精力了。&lt;/p>
&lt;p>许多作家对于写作入门者的建议是，不要拘于形式和文笔，遵循自己的内心和想法，马上开始动笔，你会慢慢发现自己写得越来越好。我想这个观点放在这里也适用——建站才只是开始，不要过于纠结外观和功能，专注于内容才是关键。&lt;/p>
&lt;h2 id="参考文档">参考文档&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://pages.github.com/">GitHub Pages&lt;/a>：官方文档。&lt;/li>
&lt;li>&lt;a href="https://gohugo.io/getting-started/quick-start/">Hugo Getting Started&lt;/a>：官方文档。&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/37752930">如何使用Hugo在GitHub Pages上搭建免费个人网站&lt;/a>&lt;/li>
&lt;/ul></content><category scheme="https://fjchen.top/posts/" term="posts" label="posts"/><category scheme="https://fjchen.top/tags/%E6%89%8B%E5%86%8C/" term="手册" label="手册"/><category scheme="https://fjchen.top/tags/%E5%8D%9A%E5%AE%A2/" term="博客" label="博客"/></entry><entry><title type="text">博客开张</title><link rel="alternate" type="text/html" href="https://fjchen.top/posts/2022-01-20-start-blog/"/><id>https://fjchen.top/posts/2022-01-20-start-blog/</id><updated>2022-05-23T20:45:14+08:00</updated><published>2022-01-20T00:00:00+00:00</published><author><name>fjchen</name><uri>https://fjchen.top</uri><email>fjchen7@gmail.com</email></author><rights>在保留本文作者及本文链接的前提下，非商业用途随意转载分享。</rights><summary type="html">经历一周时间，忙里偷闲，终于搭好了这个博客。</summary><content type="html">&lt;p>经历一周时间，忙里偷闲，终于搭好了这个博客。&lt;/p>
&lt;h2 id="为什么搭建博客">为什么搭建博客？&lt;/h2>
&lt;p>搭建这个博客是非常偶然的。没有什么计划，只是突然意识到应该记录一下自我，否则以后会发现什么痕迹没留下。我坚持写过日记（正经人谁写日记🐶），但无非是一些无病呻吟的口水话，现在看来只能是笑笑年少单纯，很难体会到当时的心情。而且日记总是难以坚持，我每写一段时间，就会荒废更长的时间，然后等着心血来潮重新拾起。于是选择只剩公共平台了，而国内的环境太差，账号和文章都不属于作者，剩下的就只有博客。&lt;/p>
&lt;h2 id="这个博客写什么">这个博客写什么？&lt;/h2>
&lt;p>如前面所说，初心是记录，但这里的背面是传递价值。如果写的还是泛滥的情绪或无关紧要的琐事，那就没有什么意义了。我想总归要沉淀些什么，思考和梳理出一些想法和过程，然后传递出来。无论是观点，事实或一些技巧，只要能给人带来帮助，那就是价值所在。最坏的情况下，如果一个读者也没有，我也希望未来的自己在回顾这些文字时，能收获或回忆一些东西，赞同某些观点。文字是有韧性，这种力量不会随着时间而消散。&lt;/p>
&lt;p>愿景归愿景，回归到个人本身，我的本职是开发，所以大概一半以上的内容会跟这方面相关。可能实现了什么或发现某个原理，就会迫不及待地想写下来。许多开发者都是这么做的，但我在写作上还有一点追求。费曼说过，用简单的表述去解释复杂的东西，让小孩子也能理解，你才算学懂了。技术文章都偏理性，但作为思考和归纳的一个渠道，我会试图解释清楚它们，写得浅显易懂，力求不了解该领域的读者也能有所收获。这算是一个小小的执着吧。&lt;/p>
&lt;p>此外，我的空闲时间都投入在阅读中了。所以如果读到什么好书，也很可能会分享在这里。书是很不错的东西，离开学校后，只有伴随着它你才不会丢失成长。我的阅读范围并不限于特定领域，所以内容也会比较杂，可能从医疗健康到历史人文，从物理化学到金融政治，无所不包。我不是专家，但将已有的知识分享出来，顺序满足一下分享欲，那也很不错。&lt;/p>
&lt;p>当然，如果生活中发现什么趣事，我也可能写在这里。总是严肃内容会让这个空间看起来有点冷峻，偶尔还是需要一点好玩的东西。&lt;/p>
&lt;h2 id="最后">最后&lt;/h2>
&lt;p>抱着一点功利心，若记录之外能为我带来其他收获，比如写作的提升，个人履历的体现，甚至是未来给能以此为基础出一本小书，那就再好不过了。但这些都过于遥远，多妄想将扰乱当下。沉淀够扎实了，必定会有意外收获，但目前更应该专注于一字一句上。&lt;/p>
&lt;p>搭建好博客后，最大的困难在于能否坚持。只要能坚持下去，那就成功了八成以上。现在我自然是颇有信心，但未来如何，谁也难以预料。希望在半年一年后，重新回顾这段时间，能感到饱满且充满意义的。&lt;/p></content><category scheme="https://fjchen.top/posts/" term="posts" label="posts"/><category scheme="https://fjchen.top/tags/%E5%8D%9A%E5%AE%A2/" term="博客" label="博客"/><category scheme="https://fjchen.top/tags/%E9%87%8C%E7%A8%8B%E7%A2%91/" term="里程碑" label="里程碑"/></entry></feed>