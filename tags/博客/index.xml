<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>博客 - 标签 - fjchen</title><link>https://fjchen.top/tags/%E5%8D%9A%E5%AE%A2/</link><description>博客 - 标签 - fjchen</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 22 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://fjchen.top/tags/%E5%8D%9A%E5%AE%A2/" rel="self" type="application/rss+xml"/><item><title>本博客的搭建流程</title><link>https://fjchen.top/posts/2022-01-22-blog-setup-process/</link><pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://fjchen.top/posts/2022-01-22-blog-setup-process/</guid><description><![CDATA[<p><a href="https://pages.github.com/" target="_blank" rel="noopener noreffer">GitHub Pages</a> 是 Github 提供的一项服务，让你能不需要主机和域名，通过仓库就能建立个人网站。</p>
<p>用 GitHub Pages 搭建的大都是静态网站。静态网站是指提前编译好文件，访问时直接返回它们的网站。与之相对的是动态网站，每次访问时服务器需要重新生成文件。由于内容变化不频繁，个人博客基本都是静态网站。</p>
<p>通过编写 HTML/CSS/JavaScript，理论上能在静态网站上实现各种功能，比如样式、评论、标签等。但这费时费力，对于没有前端经验的人来说也不现实。而<strong>静态网站生成器</strong>能解决这个痛点——依靠它，你能用很简单的方式来定制化，最后生成前端文件即可，大大减少了工作量。</p>
<p>GitHub Pages 常搭配的静态网站生成器有 Jekyll、Hexo 和 Hugo。</p>
<ul>
<li>Jekyll 基于 Ruby，GitHub Pages 原生支持，最老牌；</li>
<li>Hexo 基于 Node.js，定制能力强，主题丰富；</li>
<li>Hugo 基于 Go，依赖简单，生成速度快。</li>
</ul>
<p>我并不需求花哨的外观或功能，追求简单快速，因此选择 Hugo。GitHub Pages 托管网站，Hugo 提供样式和功能，两者结合能打造出酷炫好看的个人博客。</p>
<h2 id="建站流程">建站流程</h2>
<p>本章介绍用 GitHub Pages + Hugo 来搭建本博客的流程。</p>
<h3 id="1-设置-github-pages">1. 设置 GitHub Pages</h3>
<p>用 GitHub Pages 搭建个人网站的流程非常简单：</p>
<ol>
<li><a href="https://github.com/new" target="_blank" rel="noopener noreffer">新建</a>一个名字为<code>&lt;username&gt;.github.io</code>的仓库，<code>&lt;username&gt;</code>必须是你的 Github 账户名。</li>
<li>在仓库根目录下新建文件 <code>index.html</code>并提交修改。这个文件里可以是任意内容。</li>
<li>在浏览器里访问 <code>&lt;username&gt;.github.io</code>，就能看到搭好的 GitHub Page。</li>
</ol>
<p>访问 <code>https://&lt;username&gt;.github.io</code> 时，Github 会加载 main 分支下 <code>index.html</code>；如果这个文件不存在，就加载 <code>README.md</code>；否则，将显示 404。</p>
<h3 id="2-hugo-初始化博客">2. Hugo 初始化博客</h3>
<p>以 <code>index.html</code> 为入口，你可以搭配 CSS 或加上超链接，这样玩法就很多了。但手动编辑太麻烦，于是我们需要 Hugo 来「让它看起来像一个博客」。</p>
<p>首先照着<a href="https://gohugo.io/getting-started/installing/" target="_blank" rel="noopener noreffer">文档</a>在电脑上安装 Hugo，然后遵循以下步骤：</p>
<ol>
<li>克隆博客仓库到本地</li>
<li>照着<a href="https://gohugo.io/getting-started/quick-start/" target="_blank" rel="noopener noreffer">官方的 Quick Start 文档</a>初始化仓库。这里不再赘述，但有几点要注意：
<ul>
<li>命令 <code>hugo server -D</code> 让你能预览效果。</li>
<li>必须先在 <code>config.tml</code> 里配置好主题，否则网站无法正常显示。</li>
</ul>
</li>
<li>在 <code>config.toml</code> 里加上配置 <code>publishDir = 'docs'</code>，然后用命令 <code>hugo</code> 生成静态文件。现在 <code>docs/</code> 被设置成生成目录了，所生成的静态文件会被放在这里。</li>
<li>提交修改并 <code>git push</code>。</li>
<li>修改仓库的设置：Settings -&gt; Pages -&gt; Source
</li>
</ol>
<p>现在，在浏览器访问<code>https://&lt;username&gt;.github.io</code>，就能看到 Hugo 带来的变化。</p>
<p>默认设置下，Hugo 生成的静态文件放在 <code>public/</code> 目录里，而 GitHub Pages 读取 main 分支的 <code>index.html</code>。这样 GitHub Pages 没法找到 Hugo 生成的文件，页面会是空白的。步骤 3 和 5 就是为了解决这个问题：步骤 3 让 Hugo 将静态文件生成在 <code>docs/</code>下，步骤 5 让 GitHub Pages 读取 <code>docs/index.html</code>，使之能读到正确文件。</p>
<p><code>config.toml</code> 是 Hugo 的配置文件。后面要介绍的<a href="#%e4%b8%bb%e9%a2%98%e9%85%8d%e7%bd%ae" rel="">主题配置</a>大部分都会在这个文件里。</p>
<h3 id="3-绑定域名">3. 绑定域名</h3>
<p>到目前为止，一个完整博客的形态已经完成。但如果你不满足于此，想用自己的域名，那遵循以下步骤：</p>
<ol>
<li>购买域名，假设是 <code>example.com</code>。</li>
<li>在域名注册商处配置 DNS 解析：类型是 CNAME，指向 <code>&lt;username&gt;.github.io</code>。</li>
<li>在仓库的 <code>static/</code>（不存在就创建一个）下新建文件  <code>CNAME</code>，内容只有一行，为<code>example.com</code>。生成时，Hugo 会 复制<code>static/</code> 里的文件到生成目录下。</li>
<li>执行 <code>hugo</code> 重新生成静态文件，然后提交更改并 <code>git push</code>。</li>
</ol>
<p>等一小会让 DNS 解析生效。然后，通过 <code>example.com</code> 就能访问博客，而且还是 HTTPS 的。</p>
<p>步骤 2 设置 CNAME，是为了让 <code>example.com</code> 指向 <code>&lt;username&gt;.github.io</code>，使得前者所指向的 IP 与后者相同。此时，访问 <code>example.com</code> 就与访问 <code>&lt;username&gt;.github.io</code> 无异。DNS解析中，ANAME 和 CNAME 分别是不同的记录类型。ANAME 为域名指向 IP，DNS 服务器会把该域名解析成 IP；而 CNAME 为域名指向域名，DNS 服务器会先把该域名解析成所指向域名，再继续往下解析，直到获得 IP。这里使用 CNAME，就能避免 <code>&lt;username&gt;.github.io</code> 的 IP 改变时，需要重新设置 DNS 解析。</p>
<p>步骤 3 和 4 设置在每次执行 <code>hugo</code> 时，在生成目录 <code>docs/</code> 下生成 <code>CNAME</code> 文件，Github 会读取这个文件让 CNAME 生效。</p>
<h2 id="发布文章">发布文章</h2>
<h3 id="新建文章">新建文章</h3>
<p>文章以 Markdown 形式存放在 <code>content/posts/</code> 下。如果想发布新文章，在 <code>content/posts/</code> 下新建 Markdown 文件，然后撰写内容即可。但更推荐的做法是用命令 <code>hugo new posts/&lt;article_name&gt;.md</code>，这个命令会以 <code>archetypes/default.md</code> 为模版，在 <code>content/posts/</code> 下生成 Markdown 文件。</p>
<p>写完文章后，要用执行 <code>hugo</code> 重新生成静态文件，然后上传到 GitHub。这样就完成了一次文章发布。</p>
<h3 id="元数据">元数据</h3>
<p>可以在 Markdown 文章的开头添加 YAML 格式的元数据，供 Hugo 读取。比如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">title: &#34;我的第一篇文章&#34;
</span></span><span class="line"><span class="cl">date: 2020-03-04T15:58:26+08:00
</span></span><span class="line"><span class="cl">draft: false
</span></span><span class="line"><span class="cl">tag: [&#34;foo&#34;, &#34;bar&#34;]
</span></span><span class="line"><span class="cl">author: &#34;xyz&#34;
</span></span><span class="line"><span class="cl">summay: &#34;This is summary&#34;
</span></span><span class="line"><span class="cl">---
</span></span></code></pre></div><p><a href="https://hugoloveit.com/zh-cn/theme-documentation-content/#front-matter" target="_blank" rel="noopener noreffer">这里</a>有详细的元数据列表。</p>
<h3 id="模版">模版</h3>
<p><code>archetypes/default.md</code> 文件是文章的模版。Hugo提供了一套<a href="https://gohugo.io/templates/" target="_blank" rel="noopener noreffer">模版语法</a>和<a href="https://gohugo.io/functions" target="_blank" rel="noopener noreffer">内置方法</a>，能执行逻辑，动态地生成内容。文章模版里最常用的就是设置新文章的元数据，比如我的模版：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">title: &#34;{{ substr (replace .Name &#34;-&#34; &#34; &#34;)  11 | title }}&#34;
</span></span><span class="line"><span class="cl">date: {{ substr .Name 0 10 }}
</span></span><span class="line"><span class="cl">tags: [&#34;foo&#34;]
</span></span><span class="line"><span class="cl">summary: &#34;&#34;
</span></span><span class="line"><span class="cl">---
</span></span></code></pre></div><p>用上面的模版，执行 <code>hugo new posts/2022-01-20-my-first-post.md</code> 所生成文件 <code>2022-01-20-my-first-post.md</code> 里的内容为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">title: &#34;My First Post&#34;
</span></span><span class="line"><span class="cl">date: 2022-01-20
</span></span><span class="line"><span class="cl">tags: [&#34;bar&#34;]
</span></span><span class="line"><span class="cl">summary: &#34;&#34;
</span></span><span class="line"><span class="cl">---
</span></span></code></pre></div><p>模版中的 <code>.Name</code>  是变量，表示文件名。另一个常用变量是  <code>.Data</code>，表示当前日期。<code>replace</code> 和 <code>substr</code> 都是 Hugo 提供的方法。<code>title</code> 字段里，先用 <code>replace</code> 将 <code>-</code> 替换成空格，再用 <code>substr</code> 截取第 11 位到结尾的字符。<code>date</code> 字段里，直接用 <code>substr</code> 截取文件名的前 10 个字符。</p>
<p>不仅仅是生成文章，Hugo 模版还能生成各种 Html 和其他文件，功能强大。要精通 Hugo 就得熟知模版的开发。</p>
<h3 id="自动化发布">自动化发布</h3>
<p>发布文章的流程里有一个很麻烦的地方：每次都要用执行 <code>hugo</code> 重新生成一次静态文件，然后推到远程仓库。这一步很容易忘记，而且生成的文件比较大，推送也比较慢。</p>
<p>我们可以依靠 GitHub Actions，将这一步自动化，这里的逻辑为：</p>
<ol>
<li>在 main 分支修改内容，并推送到仓库。</li>
<li>GitHub Actions 发现新提交，就用 <code>Hugo</code> 编译，把生成的文件提交到另一个分支 gh-pages 上。</li>
<li>GitHub Pages 监控 gh-pages 分支的内容，发现新提交就重建网页。</li>
</ol>
<p>具体的设置步骤如下：</p>
<ol>
<li>新建分支 gh-pages 并推送到远程仓库</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout --orphan gh-pages
</span></span><span class="line"><span class="cl">git reset --hard
</span></span><span class="line"><span class="cl">git commit --allow-empty -m <span class="s2">&#34;Initializing gh-pages branch&#34;</span>
</span></span><span class="line"><span class="cl">git push origin gh-pages
</span></span><span class="line"><span class="cl">git checkout main
</span></span></code></pre></div><ol start="2">
<li>编写 GitHub Actions 脚本并提交，具体内容可以见<a href="https://github.com/fjchen7/fjchen7.github.io/commit/1ce6f830c50c1e86e672ffec18acd72a98390bf6" target="_blank" rel="noopener noreffer">这个 commit</a>。</li>
<li>配置让 GitHub Pages 读取 gh-pages 分支的根目录：修改仓库的 Settings -&gt; Pages -&gt; Source
</li>
</ol>
<p>现在，一旦推送修改到 main 分支，GitHub Actions 会生成静态文件并提交到 gh-pages 分支。这样就省去了一步，而且源文件和编译后的文件分开了，内容更好维护。</p>
<h2 id="主题配置">主题配置</h2>
<p>博客的基本功能都搭建好了，剩下的就是主题配置。这是个苦力活，因为很难一下子找到自己喜欢的主题，而且需要慢慢实验配置项来看是否满意。</p>
<h3 id="loveit">LoveIt</h3>
<p>找来找去，我最后选择了 <a href="https://github.com/dillonzq/LoveIt" target="_blank" rel="noopener noreffer">LoveIt</a>。除了它，类似主题还有 <a href="https://github.com/liuzc/LeaveIt" target="_blank" rel="noopener noreffer">LeaveIt</a>（最早）、<a href="https://github.com/Fastbyte01/KeepIt" target="_blank" rel="noopener noreffer">KeepIt</a>、<a href="https://github.com/sunt-programator/CodeIT" target="_blank" rel="noopener noreffer">CodeIt</a>、<a href="https://github.com/HEIGE-PCloud/DoIt" target="_blank" rel="noopener noreffer">DoIt</a> 等。这类 XXIt 主题有这么多，都是因为前人不再维护，其他人 Fork 新开了新项目。</p>
<p>我的 LoveIt 配置可以见<a href="https://github.com/fjchen7/fjchen7.github.io/blob/main/config.toml" target="_blank" rel="noopener noreffer">这里</a>，都是比较细节的改动：</p>
<ul>
<li>
<p><a href="https://github.com/fjchen7/fjchen7.github.io" target="_blank" rel="noopener noreffer">基本配置</a>：包括标题、个人说明、导航栏、评论等</p>
</li>
<li>
<p>自定义代码字体：在 <code>themes/LoveIt/assets/css/_overrides.scss</code> 里添加</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-scss" data-lang="scss"><span class="line"><span class="cl"><span class="k">@import</span> <span class="sx">url(&#39;https://fonts.googleapis.com/css?family=Fira+Mono:400,700&amp;display=swap&amp;subset=latin-ext&#39;)</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$code-font-family</span><span class="o">:</span> <span class="n">Fira</span> <span class="n">Code</span><span class="o">,</span> <span class="n">Source</span> <span class="n">Code</span> <span class="n">Pro</span><span class="o">,</span> <span class="n">Monaco</span><span class="o">,</span> <span class="n">Menlo</span><span class="o">,</span> <span class="n">Fira</span> <span class="n">Mono</span><span class="o">,</span> <span class="n">Consolas</span><span class="o">,</span> <span class="ni">monospace</span><span class="p">;</span>
</span></span></code></pre></div><p><code>_overrides.scss</code> 的内容能覆盖默认的 CSS。</p>
</li>
<li>
<p>修改GitHub的图标：在 <code>themes/LoveIt/assets/data/social.yml</code> 里将 <code>fa-github-alt</code> 改为 <code>fa-github</code>。这里用的都是 fontawesome 提供的图标。</p>
</li>
</ul>
<p>我这做了简单的配置。如果要做深入定制化，可以参考参考别人的经验：</p>
<ul>
<li><a href="https://www.cnblogs.com/langyao/p/14285886.html" target="_blank" rel="noopener noreffer">使用Hugo框架搭建博客的过程 - 主题配置</a></li>
<li><a href="https://lewky.cn/posts/hugo-3.html" target="_blank" rel="noopener noreffer">Hugo系列(3.0) - LoveIt主题美化与博客功能增强</a></li>
</ul>
<h3 id="其他主题">其他主题</h3>
<p>除了 LoveIt，这里还有一些不错但我没有选择的主题：</p>
<ul>
<li><a href="https://github.com/adityatelange/hugo-PaperMod" target="_blank" rel="noopener noreffer">hugo-PaperMod</a>：布局和 LoveIt 很像，但导航栏位于文章首页，所以没用上。</li>
<li><a href="https://github.com/luizdepra/hugo-coder" target="_blank" rel="noopener noreffer">Hugo-coder</a>：风格深得我心，但没有标签和导航栏，也不是为国人定制的。</li>
<li><a href="https://github.com/olOwOlo/hugo-theme-even" target="_blank" rel="noopener noreffer">hugo-theme-even</a>：好看，该有的功能都有，但比较烂大街。</li>
<li><a href="https://github.com/CaiJimmy/hugo-theme-stack" target="_blank" rel="noopener noreffer">hugo-theme-stack</a>：布局丰富，是另一种风格。<a href="https://mantyke.icu/categories/%E9%BA%BB%E7%93%9C%E5%BF%AB%E9%80%9F%E5%BF%B5%E5%92%92%E4%BA%92%E5%8A%A9%E5%B0%8F%E7%BB%84/" target="_blank" rel="noopener noreffer">这里</a>有一些该主题的配置文章。</li>
</ul>
<p>如果你还还获取更多主题，可以在这些地方逛逛：</p>
<ul>
<li><a href="https://themes.gohugo.io/" target="_blank" rel="noopener noreffer">Hugo Themes</a>：官方主题库。</li>
<li><a href="https://hugothemesfree.com/" target="_blank" rel="noopener noreffer">Hugo Themes Free</a></li>
</ul>
<h2 id="小结">小结</h2>
<p>本文介绍 Github Pages + Hugo 搭建个人博客的流程，并梳理了文章发布的过程和主题配置的大致形式。Github Pages 是一个很良心的服务，为个人博主省去了很多麻烦。而对于 Hugo，我本着「内容为上」的原则，只简单使用了开源主题，没有进行深度定制。不考虑外观，初学者用这两个工具在1～2小时里就能搭起网站。但如果考虑更为细节的样式和功能，那就需要投入很大精力了。</p>
<p>许多作家对于写作入门者的建议是，不要拘于形式和文笔，遵循自己的内心和想法，马上开始动笔，你会慢慢发现自己写得越来越好。我想这个观点放在这里也适用——建站才只是开始，不要过于纠结外观和功能，专注于内容才是关键。</p>
<h2 id="参考文档">参考文档</h2>
<ul>
<li><a href="https://pages.github.com/" target="_blank" rel="noopener noreffer">GitHub Pages</a>：官方文档。</li>
<li><a href="https://gohugo.io/getting-started/quick-start/" target="_blank" rel="noopener noreffer">Hugo Getting Started</a>：官方文档。</li>
<li><a href="https://zhuanlan.zhihu.com/p/37752930" target="_blank" rel="noopener noreffer">如何使用Hugo在GitHub Pages上搭建免费个人网站</a></li>
</ul>
]]></description></item><item><title>博客开张</title><link>https://fjchen.top/posts/2022-01-20-start-blog/</link><pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate><author>作者</author><guid>https://fjchen.top/posts/2022-01-20-start-blog/</guid><description><![CDATA[<p>经历一周时间，忙里偷闲，终于搭好了这个博客。</p>
<h2 id="为什么搭建博客">为什么搭建博客？</h2>
<p>搭建这个博客是非常偶然的。没有什么计划，只是突然意识到应该记录一下自我，否则以后会发现什么痕迹没留下。我坚持写过日记（正经人谁写日记🐶），但无非是一些无病呻吟的口水话，现在看来只能是笑笑年少单纯，很难体会到当时的心情。而且日记总是难以坚持，我每写一段时间，就会荒废更长的时间，然后等着心血来潮重新拾起。于是选择只剩公共平台了，而国内的环境太差，账号和文章都不属于作者，剩下的就只有博客。</p>
<h2 id="这个博客写什么">这个博客写什么？</h2>
<p>如前面所说，初心是记录，但这里的背面是传递价值。如果写的还是泛滥的情绪或无关紧要的琐事，那就没有什么意义了。我想总归要沉淀些什么，思考和梳理出一些想法和过程，然后传递出来。无论是观点，事实或一些技巧，只要能给人带来帮助，那就是价值所在。最坏的情况下，如果一个读者也没有，我也希望未来的自己在回顾这些文字时，能收获或回忆一些东西，赞同某些观点。文字是有韧性，这种力量不会随着时间而消散。</p>
<p>愿景归愿景，回归到个人本身，我的本职是开发，所以大概一半以上的内容会跟这方面相关。可能实现了什么或发现某个原理，就会迫不及待地想写下来。许多开发者都是这么做的，但我在写作上还有一点追求。费曼说过，用简单的表述去解释复杂的东西，让小孩子也能理解，你才算学懂了。技术文章都偏理性，但作为思考和归纳的一个渠道，我会试图解释清楚它们，写得浅显易懂，力求不了解该领域的读者也能有所收获。这算是一个小小的执着吧。</p>
<p>此外，我的空闲时间都投入在阅读中了。所以如果读到什么好书，也很可能会分享在这里。书是很不错的东西，离开学校后，只有伴随着它你才不会丢失成长。我的阅读范围并不限于特定领域，所以内容也会比较杂，可能从医疗健康到历史人文，从物理化学到金融政治，无所不包。我不是专家，但将已有的知识分享出来，顺序满足一下分享欲，那也很不错。</p>
<p>当然，如果生活中发现什么趣事，我也可能写在这里。总是严肃内容会让这个空间看起来有点冷峻，偶尔还是需要一点好玩的东西。</p>
<h2 id="最后">最后</h2>
<p>抱着一点功利心，若记录之外能为我带来其他收获，比如写作的提升，个人履历的体现，甚至是未来给能以此为基础出一本小书，那就再好不过了。但这些都过于遥远，多妄想将扰乱当下。沉淀够扎实了，必定会有意外收获，但目前更应该专注于一字一句上。</p>
<p>搭建好博客后，最大的困难在于能否坚持。只要能坚持下去，那就成功了八成以上。现在我自然是颇有信心，但未来如何，谁也难以预料。希望在半年一年后，重新回顾这段时间，能感到饱满且充满意义的。</p>
]]></description></item></channel></rss>